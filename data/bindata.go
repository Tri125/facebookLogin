// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xdf\x6b\x23\x37\x10\x7e\x8e\xc1\xff\xc3\x74\x29\x78\x0d\x1b\x6d\xee\xfa\x12\xd6\x76\x4a\xdc\x4b\x20\xa5\x24\xa1\xf1\x15\x4a\x29\x41\x96\x66\x6d\xd9\x5a\x69\x4f\xa3\x4d\x62\xcc\xfe\xef\x45\xde\x1f\x76\xae\xe1\x5e\x56\x2b\xcd\xa7\x6f\x46\x33\xdf\xcc\x7e\x2f\x31\x57\x06\x21\x52\x46\xe2\xdb\x23\x5f\x61\x54\xd7\xc3\xc1\xf4\xa7\x2f\x0f\xbf\x2d\xfe\x7e\xbc\x81\xb5\x2f\xf4\xd5\x70\x30\xed\x57\xe4\x32\xac\x05\x7a\x0e\x62\xcd\x1d\xa1\x9f\x45\x5f\x17\xb7\xe7\x97\x51\x38\xf7\xca\x6b\xbc\x5a\x84\x2f\xd8\x1c\xfc\x1a\x41\x5a\x51\x15\x68\xfc\x34\x6d\x8c\xc3\xc1\x94\x84\x53\xa5\x07\x72\x62\x16\xad\xbd\x2f\x29\x4b\x53\xbe\xe1\x6f\x6c\x65\xed\x4a\x23\x2f\x15\x31\x61\x8b\xc3\x59\xaa\xd5\x92\xd2\xcd\xb7\x0a\xdd\x2e\xfd\x85\x7d\x66\x9f\xda\x0d\x2b\x94\x61\x1b\x8a\xae\xa6\x69\xc3\x17\x98\xd3\x36\xc0\xe1\x60\xba\xb4\x72\x77\x74\x76\x35\x1c\x00\xbc\x2a\x23\xed\x2b\xcb\x97\xd7\xb4\x33\xe2\xce\x28\x0f\x33\xc8\x2b\x23\xbc\xb2\x26\x1e\xc3\x3e\x80\x00\x6e\xe7\x4c\x19\xe5\xe3\x76\x0b\xc0\xcb\xf2\x4e\x36\xbf\x19\x8c\xf6\x7b\x76\x5d\x96\x77\x5f\xea\x7a\x94\x74\x08\x61\xed\x56\x61\x8b\xf0\xae\xc2\xde\xf2\x96\x2f\x0b\x0d\x1f\x59\x5e\xd0\x91\xb2\xa6\x65\x7d\xf9\xcc\x3e\x5d\x8c\x1a\x5b\x3d\x9e\xf4\x91\x5c\x97\xe5\xcd\x0b\x1a\x4f\x4c\xdb\x55\xa8\xd0\x5f\x0a\x5f\xe3\x00\x08\x90\xba\x5d\xe3\xfe\x15\x32\x01\x4a\x40\xc9\x71\x17\xfd\x0b\x77\xb0\xa1\x04\xf2\x0d\xc1\x0c\x24\x5b\xa1\xbf\xd1\x18\x2a\x42\xf3\xdd\x82\xaf\xee\x79\x81\x31\x8d\xff\xb9\xf8\xb7\x75\x0a\x2a\x87\xf8\x14\x37\xdf\xdd\xc9\x58\xc9\xf1\x18\xf6\x0e\x7d\xe5\xcc\xa4\x6e\x91\x2d\xa5\x70\xc8\x3d\xb6\xe8\x98\xc6\x13\xd8\x10\x53\x12\x66\xa0\xe4\xa4\x87\x32\x72\x02\x66\x10\xa5\xa9\xb0\xc6\xa0\xf0\x2c\xe7\x02\x97\xd6\x6e\x99\x41\x9f\xa2\x79\xfe\xfa\x94\x92\xdc\x86\xa2\x76\xb7\xf2\x0d\xb1\x92\x3b\x34\xfe\xde\x4a\x64\xca\x10\x3a\x3f\xc7\xdc\x3a\x8c\xdb\x47\xb5\xb9\xaa\xe3\x4e\x68\x09\x8c\x9a\x9a\x8f\x12\x18\x75\x2e\xce\x37\x44\x72\x3b\x1a\x37\x89\x1b\x0e\xba\x7c\x81\x58\xa3\xd8\xfe\x61\x57\xca\x3c\x79\xee\xb1\x53\xc1\xed\x3c\x24\xa0\x3f\xaf\xe8\x98\x61\x87\x54\x5a\x43\xd8\xeb\x45\x58\x43\x56\x63\x28\xd0\xd1\xd8\x16\xa6\xc9\x7f\xc9\x77\xda\xf2\x90\x90\x7d\xe4\xed\x16\x4d\x94\x41\x87\x64\xbc\xf2\xeb\x3f\xfb\x8d\x10\x48\xb4\x08\x98\xba\xa7\xf8\x99\x85\x4e\xe8\xf4\x78\x56\xa0\x5f\x5b\x99\x41\xf4\xf8\xf0\xb4\x88\x5a\x3d\x9d\x55\x4e\x67\x70\x68\xa7\x2c\x4d\xb5\x15\x5c\xaf\x2d\xf9\xec\xf2\xe2\xf2\xe2\xd7\x5c\xa1\x96\x34\xcb\x95\x23\xff\x6c\x78\x81\x89\xe6\xdd\x1f\x16\x5c\xe9\xe4\x70\x01\x7b\x32\xc9\x3d\xcf\xe0\xf7\xa7\x87\x7b\x46\xde\x29\xb3\x52\xf9\x2e\x6e\x5f\x31\xee\x15\x0c\x40\xd5\x21\xde\x0c\x4e\xb3\x53\x69\xdf\xa9\xef\xec\x83\xfc\x04\xf3\xe4\x48\x51\x9f\xd0\xa1\x73\xd6\xbd\x23\xfb\x56\x21\xf9\x04\xe8\x50\x83\xa4\x01\x2c\xd6\xce\xbe\x9a\x5e\xe0\xd0\xb5\xe0\xd1\x4b\x03\x3f\xf5\xf2\x3d\xe2\x94\xe8\x07\xb0\x36\x00\xd6\x15\x6b\x81\x6f\xef\x83\x7f\xd7\xb0\x87\x25\xcc\xcf\xe3\x44\x1a\x0e\xa6\xf9\x32\xd3\x41\x47\xe7\xcb\xca\x7b\x6b\x20\x20\x49\xd8\x12\x67\x51\x59\x2d\xb5\x12\xcf\xa5\xb3\xb9\xd2\x6d\x29\xa2\x60\xb7\xe6\x70\x65\x16\xfd\x4f\x9e\x93\xc3\x9c\x4d\xbf\x23\x6d\x3c\xa5\xed\xcc\x3b\x0c\xc2\x66\x62\xef\xf7\x68\x64\x5d\xff\x17\x00\x00\xff\xff\x6d\x4b\x49\x54\xea\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1514, mode: os.FileMode(438), modTime: time.Unix(1506635090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

